from typing import Iterable
from django.contrib.auth.models import AbstractUser, UserManager
from django.db import models


class newUserManager(UserManager):
    def create_user(self, username, email, password, **extra_fields):
        """
        Creates a new regular user.
        """
        
        username = "".join(str(username).split(" "))
        email = "".join(str(email).split(" "))
        password = "".join(str(password).split(" "))

        user = self.model(username=username, email=self.normalize_email(email), **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password, **extra_fields):
        """
        Creates a new superuser.
        """
        
        extra_fields.setdefault('is_staff',True)
        extra_fields.setdefault('is_superuser',True)
        return self.create_user(username, email, password, **extra_fields)

class NewUser(AbstractUser):
    """
    This model is used to redefine the user model with additional fields like 'Bearer_Token' , 'Refresh_Token' , 'Blacklisted'.
    It is an independent Model , having
    """
    
    Access_Token = models.CharField() # will be generated by system-backend
    Refresh_Token = models.CharField() # will be generated by system-backend
    Key = models.CharField() # will be generated by system-backend
    Blacklisted = models.BooleanField(default=False)
    
    REQUIRED_FIELDS = ['username','email','password']  # Include required fields

    objects = newUserManager()

    def __str__(self):
        return f"{self.username} ({self.first_name} {self.last_name})"
    
    def save(self, force_insert: bool = ..., force_update: bool = ..., using: str | None = ..., update_fields: Iterable[str] | None = ...) -> None:
        return super().save(force_insert, force_update, using, update_fields)
